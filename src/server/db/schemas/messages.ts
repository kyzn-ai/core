/**
 * @file A schema for storing messages of a thread.
 * @author Riley Barabash <riley@rileybarabash.com>
 */

import { llmConfigurations, threads, users } from "."
import { mysqlTable } from "~/utils"
import { relations, type InferSelectModel } from "drizzle-orm"
import { boolean, index, json, text, timestamp, varchar } from "drizzle-orm/mysql-core"
import { v4 as uuid } from "uuid"

/**
 * @description All of the possible message roles.
 */
export const messageRoles = ["user", "assistant", "system", "tool"] as const

/**
 * @description The label of the entity that produced the message.
 */
export type MessageRole = (typeof messageRoles)[number]

/**
 * @description A tool call generated by the model.
 */
export interface MessageToolCall {
    /**
     * @description The ID of the tool call.
     */
    id: string

    /**
     * @description The function that the model called.
     */
    function: MessageToolCallFunction

    /**
     * @description The type of the tool. Currently, only `function` is supported.
     */
    type: "function"
}

/**
 * @description The function that the model called.
 */
export interface MessageToolCallFunction {
    /**
     * @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string

    /**
     * @description The name of the function to call.
     */
    name: string
}

/**
 * @description Additional information about the message.
 */
export type MessageMetadata = unknown[]

/**
 * @description A table for storing messages of a conversation.
 */
export const messages = mysqlTable(
    "message",

    {
        /**
         * @description The unique identifier of the message.
         */
        id: varchar("id", { length: 255 }).notNull().$defaultFn(uuid).primaryKey(),

        /**
         * @description The ID of the user that created the message, if applicable.
         */
        userId: varchar("user_id", { length: 255 }).notNull(),

        /**
         * @description The ID of the LLM configuration that created the message, if applicable.
         */
        llmConfigurationId: varchar("llm_configuration_id", { length: 255 }),

        /**
         * @description The label of the entity that produced the message.
         */
        role: varchar("role", { length: 31, enum: messageRoles }).$type<MessageRole>().notNull(),

        /**
         * @description The ID of the thread that the message belongs to.
         */
        threadId: varchar("thread_id", { length: 255 }).notNull(),

        /**
         * @description The contents of the message.
         */
        content: text("content"),

        /**
         * @description The tool calls generated by the model, such as function calls.
         */
        toolCalls: json("tool_calls").$type<MessageToolCall[]>(),

        /**
         * @description The message's visibility status.
         */
        archived: boolean("archived").default(false),

        /**
         * @description The date and time the message was created.
         */
        createdAt: timestamp("created_at").notNull().defaultNow(),

        /**
         * @description Additional information about the message.
         */
        metadata: json("metadata").$type<MessageMetadata>()
    },

    /**
     * @description Returns the indexes for the table.
     */
    message => ({
        /**
         * @description An index on all of the columns used to search for a message.
         */
        // lookupIdx: index("lookup_idx").on(message.role, message.content),

        /**
         * @description An index on the ID of the user associated with the message.
         */
        userIdIdx: index("user_id_idx").on(message.userId),

        /**
         * @description An index on the ID of the LLM configuration associated with the message.
         */
        llmConfigurationIdIdx: index("llm_configuration_id_idx").on(message.llmConfigurationId),

        /**
         * @description An index on the ID of the thread that the message belongs to.
         */
        threadIdIdx: index("thread_id_idx").on(message.threadId)
    })
)

/**
 * @description The relations for the "message" table.
 */
export const messagesRelations = relations(messages, ({ one }) => ({
    /**
     * @description One message can be associated with one user.
     */
    user: one(users, { fields: [messages.userId], references: [users.id] }),

    /**
     * @description One message can be associated with one LLM configuration.
     */
    llmConfiguration: one(llmConfigurations, { fields: [messages.llmConfigurationId], references: [llmConfigurations.id] }),

    /**
     * @description One message can be associated to one thread.
     */
    thread: one(threads, { fields: [messages.threadId], references: [threads.id] })
}))

export type Message = InferSelectModel<typeof messages>
